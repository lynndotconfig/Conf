# Install cas server in ubuntu 14.04 tutorial


＃　install demand software
sudo apt-get upgrade
sudo apt-get install tomcat7 maven2 default-jdk libtcnative-1 libssl-dev

# after the installation there will be some new enviroment variables 
# that you want to set
export CATALINA_HOME=/usr/share/tomcat7
export CATALINA_BASE=/var/lib/tomcat7
export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64


# install cas-server

# Download Jasig Cas 4.0:
sudo wget http://downloads.jasig.org/cas/cas-server-4.0.0-release.zip
unzip cas-server-4.0.0-release.zip

# remove tomcat7 webapps ROOT content
sudo rm -rf /var/lib/tomcat7/webapps/*

# Copy war file to Tomcat Web Root:
sudo cp cas-server-4.0.0/modules/cas-server-webapp-4.0.0.war /var/lib/tomcat7/webapps/ROOT.war

# So now, restart tomcat:
sudo /etc/init.d/tomcat7 restart

# symlinks to /usr/share/tomcat7/ (ubuntu 14.04 bug)

sudo ln -s /var/lib/tomcat7/common/ common
sudo ln -s /var/lib/tomcat7/server/ server
sudo ln -s /var/lib/tomcat7/shared/ shared


# generate .keystore and remenber your keystore password,
# It will generate file ".keystore" in your home directory.
# "$JAVA_HOME/bin/keytool -genkey -alias tomcat -keyalg RSA..." is 
# the same with "keytool -genkey ..." 
keytool -genkey -alias tomcat -keyalg RSA -keypass password -storepass password -dname "CN=Unknown, OU=Unknown, L=Unknown, ST=Unknown, C=Unknown"

# cp the keystore to share
sudo cp ./keystore /usr/share/tomcat7

# edit SSL connection　on /var/lib/tomcat7/conf/server.xml
＃　modify connection 8080 and 8443 as follows
<Connector port="8080" protocol="HTTP/1.1"
connectionTimeout="20000"
URIEncoding="UTF-8"
redirectPort="8443"
address="0.0.0.0" />

<Connector port="8443" SSLEnabled="true"
maxThreads="150" scheme="https" secure="true"
keystoreFile="/usr/share/tomcat7/.keystore" keystorePass="password"
clientAuth="false" sslProtocol="TLSv1" 
/>

# edit sslProtocol in /etc/default/tomcat7, add "-Dhttps.protocols=TLSv1
JAVA_OPTS="-Djava.awt.headless=true -Xmx128m -XX:+UseConcMarkSweepGC -Dhttps.protocols=TLSv1"

# edit /var/lib/tomcat7/conf/web.xml
# add following to file before "</web-app>"
<security-constraint>
<web-resource-collection>
<web-resource-name>Protect Context</web-resource-name>
<url-pattern>/*</url-pattern>
</web-resource-collection>
<!--auth-constraint goes here if your require authentication -->
<user-data-constraint>
<transport-guarantee>CONFIDENTIAL</transport-guarantee>
</user-data-constraint>
</security-constraint>

# debug with log file will help you a lot.
＃　some usefull command
sudo /etc/init.d/tomcat7 restart
tail -f /var/lib/tomcat7/log/catalina.out
sudo netstat -ntpl
curl -IL http://localhost:8443

SOME THING MAYBE USEFULL BUT NOT NOW
# create a Self-Signed SSL Certificate
# if the witch command does not return a path 
# then you will need to install openssl youself
which openssl

openssl genrsa -des3 -passout pass:x -out server.pass.key 2048
# if this command return cannot write "random state", we can use "sudo rm ~/.rnd",
# and execute command above again.

openssl rsa -passin pass:x -in server.pass.key -out server.key
# writting RSA key

rm server.pass.key
openssl req -new -key server.key -out server.csr
# enter the server info when prompted

openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt
# the server.crt files in your site certificate suitable for use with your add-on
＃　along with the server.key private key.
